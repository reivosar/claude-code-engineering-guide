version: "0.3"

variables:
  validation_passed: false
  behaviors_list:
    ask_clarifying_questions: "Never assume requirements"
    explain_technical_decisions: "Quantify impact (performance gains = revenue impact)"
    admit_unknowns: "Say 'I need to research this' instead of guessing"
    fail_fast: "Surface problems immediately with proposed solutions"
    take_ownership: "If something breaks, focus on fixing it and preventing recurrence"
    balance_delivery: "Ship quality code that solves real business problems"
  checklist_questions:
    - "Asked clarifying questions?"
    - "Admitted unknowns?"
    - "Reported problems early?"
    - "Took ownership?"
    - "Balanced delivery?"
  mandatory_rules_list:
    process: "Start with classification, end with checklist"
    checklist_skip: "If skip checklist = task failed"
    read_claude_md: "Always read CLAUDE.md at task start to confirm latest status"
    complete_checklist: "Execute all checklist items before proceeding to next step"
    japanese_communication: "Ask questions in Japanese, require Japanese responses"

components:
  behaviors: "${variables.behaviors_list}"
  
  task_types:
    development:
      condition: "writing/modifying code"
      load: "development.yml"
    non_development:
      condition: "everything else"
      load: null
  
  checklist_basic: "${variables.checklist_questions}"
  
  mandatory_rules: "${variables.mandatory_rules_list}"

rules:
  - if: not validation_passed
    then:
      action: halt
      message: "Development validation rules loaded from development.yml"
  - if: task_type == "development"
    then:
      include:
        - components.validation_execution
        - components.validation_principles

flow:
  # CLAUDE MUST EXECUTE THESE STEPS IN EXACT ORDER - NO EXCEPTIONS
  # CLAUDE MUST FOLLOW THIS FLOW STRICTLY AND NEVER SKIP STEPS
  
  - action: classify_task
    with:
      types: "${components.task_types}"
      mandatory: true
    claude_instruction: "CLAUDE: You MUST classify the current task as development or non-development. This determines next steps."
  
  # MANDATORY: Ask clarifying questions BEFORE any work
  - action: ask
    with:
      message: "What are the specific requirements for this task? What exactly should be built/implemented?"
    claude_instruction: "CLAUDE: You MUST ask this question and wait for user response. DO NOT proceed without clear requirements."
  
  - action: confirm
    with:
      message: "Should I proceed with these requirements? {{response_to_previous_ask}}"
    claude_instruction: "CLAUDE: You MUST confirm user approval before starting development work."
  
  - if: user_response == "yes"
    then:
      - action: proceed_to_development
        message: "Requirements approved. Proceeding to next phase."
    else:
      - action: halt
        message: "Stopping until requirements are clarified and approved."
    claude_instruction: "CLAUDE: If user says yes, proceed to development. Otherwise STOP and ask for clarification."
  
  - if: task_type == "development"
    then:
      - action: load_base_yml_files
        files:
          - "development.yml"
          - "behavior-rules/index.yml"
          - "app-types.yml"
          - "risk-assessment.yml"
          - "checklist.yml"
        claude_instruction: "CLAUDE: You MUST read these base files first"
      
      - action: detect_application_type
        claude_instruction: "CLAUDE: Determine application type from requirements and load appropriate files"
      
      - if: application_type == "unknown"
        then:
          - action: ask_clarification
            message: "Cannot determine application type. Please specify web_application, cli_application, desktop_application, api_service, library_package, mobile_application, microservice, or batch_processing."
            claude_instruction: "CLAUDE: HALT until application type is clarified"
      
      - action: load_conditional_yml_files
        conditions:
          web_application:
            - "coding-rules/index.yml"
            - "design-rules/index.yml"
            - "security-rules/index.yml"
            - "validation-rules/index.yml"
          cli_application:
            - "coding-rules/index.yml"
            - "security-rules/index.yml"
            - "validation-rules/index.yml"
          desktop_application:
            - "coding-rules/index.yml"
            - "design-rules/index.yml"
            - "security-rules/index.yml"
            - "validation-rules/index.yml"
          api_service:
            - "coding-rules/index.yml"
            - "security-rules/index.yml"
            - "validation-rules/index.yml"
          library_package:
            - "coding-rules/index.yml"
            - "security-rules/index.yml"
            - "validation-rules/index.yml"
          mobile_application:
            - "coding-rules/index.yml"
            - "design-rules/index.yml"
            - "security-rules/index.yml"
            - "validation-rules/index.yml"
          microservice:
            - "coding-rules/index.yml"
            - "security-rules/index.yml"
            - "validation-rules/index.yml"
            - "git-rules/index.yml"
          batch_processing:
            - "coding-rules/index.yml"
            - "security-rules/index.yml"
            - "validation-rules/index.yml"
        claude_instruction: "CLAUDE: Load only the YAML files relevant to the detected application type"
      
      - action: assign_role
        with:
          role: "super_engineer"
          traits: "${components.behaviors}"
        claude_instruction: "CLAUDE: You MUST adopt the super engineer role with specified traits"
      
      - action: assess_risk_level
        claude_instruction: "CLAUDE: Classify task as R0/R1/R2 using risk-assessment.yml criteria"
      
      - action: develop
        claude_instruction: "CLAUDE: MANDATORY: Create test code automatically for EVERY application without being asked"
      
      - action: verify_yaml_rules_compliance
        with:
          rules:
            - "coding-rules/*.yml"
            - "design-rules/*.yml"
            - "security-rules/*.yml"
            - "validation-rules/*.yml"
        violation_handling:
          action: "IMMEDIATE_HALT"
          message: "YAML rule violation detected. Fix ALL violations before proceeding."
          protocol:
            - "Stop work immediately upon violation detection"
            - "Fix ALL violations before proceeding"
            - "NEVER present non-compliant code to user"
            - "Re-run full compliance check after fixes"
            - "Proceed to testing phase ONLY after 100% compliance achieved"
        claude_instruction: "CLAUDE: Check compliance against ALL loaded YAML rules"
      
      - action: execute_validation_sequence
        steps:
          - "create_comprehensive_test_suite"
          - "run_unit_tests_if_available"
          - "verify_startup_success"
          - "test_end_to_end_user_experience"
          - "verify_critical_paths_manually"
          - "test_api_with_real_requests"
        claude_instruction: "CLAUDE: Execute ALL validation steps from development.yml. HALT if any step fails."
      
      - action: execute_security_verification
        claude_instruction: "CLAUDE: Run security tests based on app type from security-rules"
      
      - action: run_quality_checks
        steps:
          - "lint"
          - "typecheck"
          - "build"
        claude_instruction: "CLAUDE: Run code quality tools. HALT if any check fails."
      
      - action: generate_documentation
        if: has_ui_components || is_library
        claude_instruction: "CLAUDE: Generate docs per design-rules/documentation.yml"
      
      - if: validation_failed
        then:
          - action: halt_and_fix
            message: "Validation failed. Fix ALL issues before proceeding."
            claude_instruction: "CLAUDE: IMMEDIATE HALT until all validations pass"
    claude_instruction: "CLAUDE: You MUST execute development work following all loaded YAML rules. validation_passed MUST be true before proceeding."
  
  # Handle non-development tasks
  - if: task_type == "non_development"
    then:
      - action: load_basic_files
        files:
          - "behavior-rules/index.yml"
          - "checklist.yml"
        claude_instruction: "CLAUDE: Load minimal files for non-development tasks"
      
      - action: execute_non_development_task
        claude_instruction: "CLAUDE: Handle explanation, documentation, or analysis task"
  
  - action: report_checklist
    target: components.checklist_basic
    claude_instruction: "CLAUDE: You MUST first verify completion of all checklist items yourself, then report the completed items to user with specific details."
  
  - action: confirm
    with:
      message: "Did I follow every principle?"
    claude_instruction: "CLAUDE: After reporting your checklist completion, ask user to confirm you followed all principles."
  
  - action: ask_commit
    with:
      message: "Should I commit to git?"
    claude_instruction: "CLAUDE: You MUST ask this question in English at the end of development work."
  
  - if: user_response == "yes"
    then:
      - action: load_git_rules
        files:
          - "git-rules/index.yml"
        claude_instruction: "CLAUDE: Load git rules only when user confirms commit"
      
      - action: execute_git_workflow
        claude_instruction: "CLAUDE: Follow git-rules/git-workflow.yml for commit process"
    else:
      - action: complete
        message: "Development work completed without commit."
    claude_instruction: "CLAUDE: If user says yes, load git rules and execute commit workflow. Otherwise complete without commit."

